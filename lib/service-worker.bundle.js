(()=>{"use strict";(()=>{class e{constructor(e="service-worker",o=!0){this.baseContext={},this.component=e,this.enableStorage=o}formatMessage(e,o,t){const r=(new Date).toISOString(),s={...this.baseContext,component:this.component,...t};return`${{info:"ℹ️",debug:"🔍",warn:"⚠️",error:"❌"}[e]||"📝"} [${r}] [${e.toUpperCase()}] [${this.component}] ${o}${Object.keys(s).length>1?` | Context: ${JSON.stringify(s)}`:""}`}async storeLog(e,o,t){if(this.enableStorage&&void 0!==chrome?.storage?.local)try{const r={id:crypto.randomUUID(),timestamp:(new Date).toISOString(),level:e,message:o,component:this.component,context:{...this.baseContext,...t}},s=(await chrome.storage.local.get(["dragonServiceWorkerLogs"])).dragonServiceWorkerLogs||[];s.push(r),s.length>1e3&&s.splice(0,s.length-1e3),await chrome.storage.local.set({dragonServiceWorkerLogs:s})}catch(e){console.error("Failed to store service worker log:",e)}}info(e,o){const t=this.formatMessage("info",e,o);console.info(t),this.storeLog("info",e,o)}debug(e,o){const t=this.formatMessage("debug",e,o);console.debug(t),this.storeLog("debug",e,o)}warn(e,o){const t=this.formatMessage("warn",e,o);console.warn(t),this.storeLog("warn",e,o)}error(e,o){const t=this.formatMessage("error",e,o);console.error(t),this.storeLog("error",e,o)}withContext(o){const t=new e(this.component,this.enableStorage);return t.baseContext={...this.baseContext,...o},t}forComponent(o){return new e(o,this.enableStorage)}}function o(o="service-worker",t=!0){return new e(o,t)}"undefined"!=typeof self&&(self.DragonServiceWorkerLogging={createLogger:o},self.createServiceWorkerLogger=o),console.log("🔧 Dragon Service Worker Logging module loaded")})()})();